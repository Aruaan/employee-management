Basic Manual Tests

Test: adding an employee stores it in the database

Steps:

1. Ensure the new employee doesn't already exist.
2. Send a 'POST' request to /employees with valid employee data.
3. Check if the employee has been added by sending a 'GET' request to the same endpoint.

Expected Result:

HTTP response: 201 (Created).
Response contains details of the new employee.

Test: adding an employee with no required data fails

Steps:
1. Send a 'POST' request to the /employees enpoint with employee data not containing one or more required employee data fields

Expected result:

HTTP response: 500

Test pagination works for 'all employees' request

Steps:

1. Ensure the database has 7 employees added.
2. Send a 'GET' request to the /employees endpoint with default limit(10) and offset(0) values.
3. Verify that the response contains all 7 employees.
4. Send a 'GET' request to the /employees endpoint with limit=5 and default offset value.
5. Verify that the response contains 5 employees and 2 total pages.
6. Send a 'GET' request to the /employees endpoint with limit=5 and offset=2.
7. Verify that the response contains 5 employees, starting from the third employee.
8. Repeat this process, but this time with the /employees/deactivated endpoint.

Test: deactivation of an employee moves them to the 'deactivated' section

Steps:
1. Ensure there are no deactivated employees.
2. Ensure there are two active employees in the database and say they have the IDs 'id1' and 'id2'.
3. Send a 'PATCH' request to /employees/{id}/deactivate endpoint (NOTE: replace {id} with id1).
4. Send a 'GET' request to the /employees endpoint and verify it contains only the employee with 'id2'.
5. Send a 'GET' request to the /employees/deactivated endpoint it contains only the employee with 'id1'.

Test: updating an existing employee works properly

Steps:
1. Ensure there is at least one employee in the database and get their ID.
2. Send a 'PATCH' request to the /employees/{id}/update with "name: 'Mladen Boskov'" in JSON body. (NOTE: replace {id} with the actual employee ID.)
3. Send a 'GET' request to the /employees endpoint to ensure the data has been updated.

Expected result:

HTTP response: 200 (OK)
The response contains the data of the deactivated employee.

Test: updating an existing employee with incorrect data fails

Steps:
1. Ensure there is at least one employee in the database and get their ID.
2. Send a 'PATCH' request to the /employees/{id}/update with "position:'Mladen Boskov'" in JSON body. (NOTE: replace {id} with the actual employee ID.)

Expected result:
HTTP response: 500


